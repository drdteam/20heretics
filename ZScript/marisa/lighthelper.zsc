/* Utility actor for spawning lights */
Class mkLightHelper : Actor
{
	static void MakeLight( int tid, int r, int g, int b, int rad,
		bool attenuated = false, float x = 0.0, float y = 0.0,
		float z = 0.0 )
	{
		ThinkerIterator spotlist = ThinkerIterator.Create("Actor");
		Actor s;
		DynamicLight l;
		string ltype = "PointLight";
		if ( attenuated ) ltype = "PointLightAttenuated";
		while ( s = Actor(spotlist.Next()) )
		{
			if ( s.tid != tid ) continue;
			l = DynamicLight(Spawn(ltype,s.pos+(x,y,z)));
			if ( !l ) continue;
			l.SetXYZ(s.pos+(x,y,z));
			l.args[0] = r;
			l.args[1] = g;
			l.args[2] = b;
			l.args[3] = rad;
		}
	}

	static void AddSelfLight( Actor a )
	{
		if ( !(a is "PlayerPawn") ) return;
		let l = Spawn("mkDarkLight");
		l.target = a;
	}
}

// ported from spooktime with minor tweaks
Class mkDarklight : DynamicLight
{
	float charge;

	Default
	{
		DynamicLight.Type "Point";
		+DynamicLight.ATTENUATE;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		args[LIGHT_RED] = 0;
		args[LIGHT_GREEN] = 0;
		args[LIGHT_BLUE] = 0;
		args[LIGHT_INTENSITY] = 120;
		charge = 0;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !PlayerPawn(target) )
		{
			Destroy();
			return;
		}
		SetOrigin(target.vec3Offset(0,0,target.player.viewheight),true);
		args[LIGHT_RED] = int(24*charge);
		args[LIGHT_GREEN] = int(24*charge);
		args[LIGHT_BLUE] = int(64*charge);
		bDORMANT = (target.player != players[consoleplayer]);
		if ( target.CurSector.lightLevel > 64 )
		{
			charge -= 0.15;
			if ( charge < 0.0 ) charge = 0.0;
		}
		else if ( target.vel.length() > 0 )
		{
			charge -= 0.0015*target.vel.length();
			if ( charge < 0.0 ) charge = 0.0;
		}
		else
		{
			charge += 0.012;
			if ( charge > 1.0 ) charge = 1.0;
		}
	}
}
